#
# Marlin Firmware
# PlatformIO Configuration File
#
# For detailed documentation with EXAMPLES:
#
# http://docs.platformio.org/en/latest/projectconf.html
#

# Automatic targets - enable auto-uploading
#targets = upload

#
# By default platformio build will abort after 5 errors.
# Remove '-fmax-errors=5' from build_flags below to see all.
#

[platformio]
src_dir      = Marlin
boards_dir   = buildroot/share/PlatformIO/boards
default_envs = Mini
  MiniV2
  Taz6
  Workhorse
  TazPro
include_dir  = Marlin

#
# The 'common' values are used for most Marlin builds
#
[common]
default_src_filter = +<src/*> -<src/config> -<src/HAL> +<src/HAL/shared> -<src/lcd/extui/lib/mks_ui>
  -<src/lcd/menu> -<src/lcd/dwin> -<src/lcd/extui/lib/dgus> -<src/lcd/extui/lib/ftdi_eve_touch_ui> -<src/lcd/dogm>
extra_scripts      =
  pre:buildroot/share/PlatformIO/scripts/common-features-dependencies.py
  pre:buildroot/share/PlatformIO/scripts/common-cxxflags.py
build_flags        = -fmax-errors=5 -g -D__MARLIN_FIRMWARE__ -fmerge-all-constants
lib_deps           =

#
# Feature Dependencies
#
[features]
TFT_LVGL_UI         = MKS-LittlevGL=https://github.com/makerbase-mks/MKS-LittlevGL/archive/master.zip
                      src_filter=+<src/lcd/extui/lib/mks_ui>
HAS_TRINAMIC_CONFIG = TMCStepper@~0.7.1
SR_LCD_3W_NL        = SailfishLCD=https://github.com/mikeshub/SailfishLCD/archive/master.zip
DIGIPOT_MCP4...     = SlowSoftI2CMaster
HAS_TMC26X          = TMC26XStepper=https://github.com/trinamic/TMC26XStepper/archive/master.zip
HAS_L64XX           = Arduino-L6470@0.8.0
NEOPIXEL_LED        = Adafruit NeoPixel@1.5.0
MAX6675_IS_MAX31865 = Adafruit MAX31865 library@~1.1.0
HAS_GRAPHICAL_LCD   = U8glib-HAL@0.4.1
                      src_filter=+<src/lcd/dogm>
USES_LIQUIDCRYSTAL  = LiquidCrystal@1.5.0
USES_LIQUIDTWI2     = LiquidTWI2@1.2.7
TOUCH_UI_FTDI_EVE   = src_filter=+<src/lcd/extui/lib/ftdi_eve_touch_ui>
HAS_DGUS_LCD        = src_filter=+<src/lcd/extui/lib/dgus>
DWIN_CREALITY_LCD   = src_filter=+<src/lcd/dwin>
HAS_LCD_MENU        = src_filter=+<src/lcd/menu>
(ESP32_)?WIFISUPPORT = AsyncTCP, ESP Async WebServer
  ESP3DLib=https://github.com/luc-github/ESP3DLib.git
  arduinoWebSockets=https://github.com/Links2004/arduinoWebSockets.git
  ESP32SSDP=https://github.com/luc-github/ESP32SSDP.git
  lib_ignore=ESPAsyncTCP

#
# Default values apply to all 'env:' prefixed environments
#
[env]
framework     = arduino
extra_scripts = ${common.extra_scripts}
build_flags   = ${common.build_flags}
lib_deps      = ${common.lib_deps}
monitor_speed = 250000

#################################
#                               #
#   Unique Core Architectures   #
#                               #
#  Add a new "env" below if no  #
# entry has values suitable to  #
#   build for a given board.    #
#                               #
#################################

#################################
#                               #
#       AVR Architecture        #
#                               #
#################################

#
# AVR (8-bit) Common Environment values
#
[common_avr8]
board_build.f_cpu = 16000000L
src_filter        = ${common.default_src_filter} +<src/HAL/AVR>

#
# ATmega2560
#
[env:mega2560]
platform      = atmelavr
extends       = common_avr8
board         = megaatmega2560


#
# Lulzbot Mini
#
[env:Mini]
platform      = atmelavr
extends       = common_avr8
build_flags   = ${common.build_flags} -DMini
board         = megaatmega2560

#
# Lulzbot Mini V2
#
[env:MiniV2]
platform      = atmelavr
extends       = common_avr8
build_flags   = ${common.build_flags} -DMiniV2
board         = megaatmega2560

#
# Taz 6
#
[env:Taz6]
platform      = atmelavr
extends       = common_avr8
build_flags   = ${common.build_flags} -DTaz6
board         = megaatmega2560

#
# Taz Workhorse
#
[env:Workhorse]
platform      = atmelavr
extends       = common_avr8
build_flags   = ${common.build_flags} -DWorkhorse
board         = megaatmega2560

[env:TazPro]
platform      = ${common_DUE_archim.platform}
build_flags   = ${common.build_flags} -DARDUINO_SAM_ARCHIM -DARDUINO_ARCH_SAM -D__SAM3X8E__ -DUSBCON -DTazPro
extends       = common_DUE_archim


#################################
#                               #
#       DUE Architecture        #
#                               #
#################################

#
# Due (Atmel SAM3X8E ARM Cortex-M3)
#
#  - RAMPS4DUE
#  - RADDS
#
[env:DUE]
platform      = atmelsam
board         = due
src_filter    = ${common.default_src_filter} +<src/HAL/DUE>

[env:DUE_USB]
platform      = atmelsam
board         = dueUSB
src_filter    = ${common.default_src_filter} +<src/HAL/DUE>

[env:DUE_debug]
# Used when WATCHDOG_RESET_MANUAL is enabled
platform      = atmelsam
board         = due
src_filter    = ${common.default_src_filter} +<src/HAL/DUE>
build_flags   = ${common.build_flags}
  -funwind-tables
  -mpoke-function-name

#
# Archim SAM
#
[common_DUE_archim]
platform      = atmelsam
board         = due
src_filter    = ${common.default_src_filter} +<src/HAL/DUE>
build_flags   = ${common.build_flags}
  -DARDUINO_SAM_ARCHIM -DARDUINO_ARCH_SAM -D__SAM3X8E__ -DUSBCON
extra_scripts = ${common.extra_scripts}
  Marlin/src/HAL/DUE/upload_extra_script.py

[env:DUE_archim]
platform      = ${common_DUE_archim.platform}
extends       = common_DUE_archim

# Used when WATCHDOG_RESET_MANUAL is enabled
[env:DUE_archim_debug]
platform      = ${common_DUE_archim.platform}
extends       = common_DUE_archim
build_flags   = ${common_DUE_archim.build_flags} -funwind-tables -mpoke-function-name

#
# Native
# No supported Arduino libraries, base Marlin only
#
[env:linux_native]
platform        = native
framework       =
build_flags     = -D__PLAT_LINUX__ -std=gnu++17 -ggdb -g -lrt -lpthread -D__MARLIN_FIRMWARE__ -Wno-expansion-to-defined
src_build_flags = -Wall -IMarlin/src/HAL/LINUX/include
build_unflags   = -Wall
lib_ldf_mode    = off
lib_deps        =
src_filter      = ${common.default_src_filter} +<src/HAL/LINUX>

#
# Just print the dependency tree
#
[env:include_tree]
platform    = atmelavr
board       = megaatmega2560
build_flags = -c -H -std=gnu++11 -Wall -Os -D__MARLIN_FIRMWARE__
src_filter  = +<src/Marlin.cpp>
